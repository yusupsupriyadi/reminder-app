# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # GetX Optimized Rules
    # Encourage GetX patterns and best practices
    
    # Error prevention
    avoid_print: true
    avoid_unnecessary_containers: true
    avoid_web_libraries_in_flutter: true
    no_logic_in_create_state: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    
    # Code style for GetX
    always_declare_return_types: true
    always_specify_types: false # GetX works better with type inference
    annotate_overrides: true
    avoid_catches_without_on_clauses: true
    avoid_catching_errors: true
    avoid_empty_else: true
    avoid_function_literals_in_foreach_calls: true
    avoid_init_to_null: true
    avoid_null_checks_in_equality_operators: true
    avoid_relative_lib_imports: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null_for_void: true
    avoid_single_cascade_in_expression_statements: true
    avoid_slow_async_io: true
    avoid_types_as_parameter_names: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    close_sinks: true
    comment_references: true
    constant_identifier_names: true
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    hash_and_equals: true
    implementation_imports: true
    invariant_booleans: true
    iterable_contains_unrelated_type: true
    library_names: true
    library_prefixes: true
    list_remove_unrelated_type: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    non_constant_identifier_names: true
    null_closures: true
    omit_local_variable_types: true
    only_throw_errors: true
    overridden_fields: true
    package_api_docs: false # Not required for app development
    package_prefixed_library_names: true
    prefer_adjacent_string_concatenation: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_contains: true
    prefer_equal_for_default_values: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_iterable_whereType: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    recursive_getters: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    type_init_formals: true
    unawaited_futures: true
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_statements: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_rethrow_when_possible: true
    valid_regexps: true
    void_checks: true

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart" 
    - "**/*.mocks.dart"
    - "**/generated_plugin_registrant.dart"
    - "build/**"
    - "android/**"
    - "ios/**"
    - "linux/**" 
    - "macos/**"
    - "windows/**"
    - "web/**"
  
  errors:
    # GetX specific error handling
    invalid_annotation_target: ignore
    unused_import: warning
    unused_local_variable: warning
    dead_code: warning
    
    # Make these errors to enforce GetX best practices
    avoid_print: error
    prefer_const_constructors: warning
    prefer_final_fields: warning
    
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

# Additional dart code metrics for GetX projects
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 50
  metrics-exclude:
    - test/**
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  rules:
    # GetX specific rules
    - avoid-non-null-assertion
    - avoid-unused-parameters
    - binary-expression-operand-order
    - double-literal-format
    - no-boolean-literal-compare
    - no-empty-block
    - no-equal-then-else
    - prefer-conditional-expressions
    - prefer-correct-identifier-length:
        exceptions: [ 'i' ]
        max-identifier-length: 30
        min-identifier-length: 4
    - prefer-correct-type-name:
        excluded: [ 'exampleExclude' ]
        min-length: 3
        max-length: 40
    - prefer-first
    - prefer-last
    - prefer-match-file-name
